)
cat(latex_imagenes)
ruta_maps_flood
list.files(ruta_maps_flood)
kableExtra::latex_escape()
unlink("3. Reporte/Reporte_cache", recursive = TRUE)
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
base_nombres
ruta_return <- file.path(ruta_maps_flood, cliente)
ruta_return
ruta_return <- here(file.path(ruta_maps_flood, cliente))
ruta_return
base_nombres
# 1. Construir rutas a cada subcarpeta
carpetas <- file.path(ruta_return, base_nombres)
names(carpetas) <- base_nombres
names(carpetas)
# 2. Listar imágenes dentro de cada carpeta
#    Puedes ajustar el patrón si tus imágenes usan otras extensiones.
imagenes_por_centro <- lapply(carpetas, function(dir) {
if (dir.exists(dir)) {
list.files(
path       = dir,
pattern    = "(?i)\\.(png|jpe?g)$",
full.names = TRUE
)
} else {
character(0)
}
})
imagenes_por_centro
library(kableExtra)
library(here)
# --- 1. Obtener rutas de imágenes para cada centro ---
imagenes_por_centro <- lapply(base_nombres, function(centro) {
# carpeta: ruta_return + nombre de carpeta (con "_")
carpeta <- here(ruta_return, centro)
if (dir.exists(carpeta)) {
# listar todos los PNG/JPG/JPEG dentro
list.files(
path       = carpeta,
pattern    = "(?i)\\.(png|jpe?g)$",
full.names = TRUE
)
} else {
character(0)
}
})
imagenes_por_centro
# carpeta: ruta_return + nombre de carpeta (con "_")
carpeta <- here(ruta_return, centro)
library(kableExtra)
library(here)
# --- 1. Obtener rutas de imágenes para cada centro ---
imagenes_por_centro <- lapply(base_nombres, function(centro) {
# carpeta: ruta_return + nombre de carpeta (con "_")
carpeta <- here(ruta_return, centro)
if (dir.exists(carpeta)) {
# listar todos los PNG/JPG/JPEG dentro
list.files(
path       = carpeta,
pattern    = "(?i)\\.(png|jpe?g)$",
full.names = TRUE
)
} else {
character(0)
}
})
# nombrar cada elemento de la lista
names(imagenes_por_centro) <- base_nombres
names(imagenes_por_centro)
for (i in seq_along(base_nombres)) {
centro       <- base_nombres[i]
nombre_limpio <- gsub("_", " ", centro)
# Nueva página en cada iteración
cat("\\newpage\n")
# Título general en la primera página
if (i == 1) {
cat(
"\\noindent ",
"\\textbf{\\textcolor{azuloscuro}{",
"\\fontsize{28}{32}\\selectfont Return Periods",
"}}",
"\n\n"
)
}
cat("\\vspace{0.5cm}\n\n")
# Subtítulo por centro
cat(
sprintf(
"\\noindent \\textbf{\\textcolor{turquesa}{\\fontsize{16}{20}\\selectfont %s}}",
nombre_limpio
),
"\n\n"
)
cat("\\vspace{0.5cm}\n\n")
# Tabla vacía 1×3
empty_tab <- matrix("", nrow = 1, ncol = 3)
kol <- kable(
empty_tab,
format   = "latex",
booktabs = TRUE,
align    = "c",
col.names = c("", "", "")
) %>%
kable_styling(
latex_options = "hold_position",
position      = "center",
full_width    = FALSE
)
# Imprimir la tabla
cat(kol)
cat("\n\n")
}
imagenes_por_centro
names(imagenes_por_centro)
nombre_limpio
base_nombres
base_limpio <- gsub("_", " ", base_nombres)
library(kableExtra)
for (i in seq_along(base_limpio)) {
centro       <- base_limpio[i]
nombre_limpio <- centro
# Listar todas las imágenes de la carpeta
rutas <- list.files(
path       = file.path(ruta_return, centro),
pattern    = "(?i)\\.(png|jpe?g)$",
full.names = TRUE
)
# Partir en grupos de hasta 3
grupos <- split(rutas, ceiling(seq_along(rutas)/3))
for (j in seq_along(grupos)) {
imgs <- grupos[[j]]
# Nueva página
cat("\\newpage\n")
# Sólo en i=1,j=1: título Return Periods
if (i == 1 && j == 1) {
cat("\\noindent ",
"\\textbf{\\textcolor{azuloscuro}{",
"\\fontsize{28}{32}\\selectfont Return Periods",
"}}",
"\n\n")
}
# Subtítulo por centro
cat(sprintf(
"\\noindent \\textbf{\\textcolor{turquesa}{\\fontsize{16}{20}\\selectfont %s}}",
nombre_limpio
), "\n\n")
# Construir tabla de imágenes: 1 fila, hasta 3 columnas
ncol <- min(3, length(imgs))
cell_latex <- paste0(
"\\includegraphics[width=0.3\\textwidth]{", imgs, "}"
)
mat <- matrix(cell_latex, nrow = 1, ncol = ncol)
# Imprimir con kableExtra centrado
cat(
kable(
mat,
format   = "latex",
booktabs = TRUE,
escape   = FALSE,
col.names = rep("", ncol)
) %>%
kable_styling(
latex_options = "hold_position",
position      = "center",
full_width    = FALSE
)
)
cat("\n\n")
}
}
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
ruta_return
base_nombres
centro
ruta_return
centro
carpeta
library(here)
library(kableExtra)
# Crear sección
cat("\\newpage\n")
cat("\\noindent \\textbf{\\textcolor{azuloscuro}{\\fontsize{28}{32}\\selectfont Return Periods}}\n")
cat("\\vspace{0.5cm}\n\n")
cat(sprintf("\\textbf{\\textcolor{turquesa}{\\fontsize{16}{20}\\selectfont %s}}\n\n", centro))
ruta_return
rm(list = ls())
library(readxl)
library(tidyverse)
library(dplyr)
library(here)
cat("\014")
# Rutas
ruta_maps_flood <- "1. Mapas"
ruta_return <- here(file.path(ruta_maps_flood, cliente))
cliente <- "Cliente ABC"
ruta_maps_flood <- file.path(ruta_maps_flood, cliente,"Ubicaciones")
ruta_maps_flood
ruta_return
ruta_return <- here(file.path(ruta_maps_flood, cliente))
ruta_return
# Rutas
ruta_maps <- "1. Mapas"
ruta_maps_flood <- file.path(ruta_maps, cliente,"Ubicaciones")
ruta_maps_flood
ruta_return <- here(file.path(ruta_maps, cliente))
ruta_return
list.files(3. Reporte)
list.files("3. Reporte")
tinetex
tinytex::tinytex_root()
here('2. Excel', '00. Reportes')
library(here)
here('2. Excel', '00. Reportes')
library(rmarkdown)
library(here)
# Renderizar el PDF y guardarlo en la carpeta "2. Excel/00. Reportes"
render(
input = here("3. Reporte", "Reporte.Rmd"),  # ruta a tu .Rmd
output_format = "pdf_document",
output_file = "Reporte.pdf",               # nombre final del archivo
output_dir = here("2. Excel", "00. Reportes")  # carpeta de destino
)
library(rmarkdown)
library(here)
install.packages("rmarkdown")
library(rmarkdown)
library(here)
# Renderizar el PDF y guardarlo en la carpeta "2. Excel/00. Reportes"
render(
input = here("3. Reporte", "Reporte.Rmd"),  # ruta a tu .Rmd
output_format = "pdf_document",
output_file = "Reporte.pdf",               # nombre final del archivo
output_dir = here("2. Excel", "00. Reportes")  # carpeta de destino
)
library(rmarkdown)
library(here)
# Renderizar el PDF y guardarlo en la carpeta "2. Excel/00. Reportes"
render(
input = here("3. Reporte", "Reporte.Rmd"),  # ruta a tu .Rmd
output_format = "pdf_document",
output_file = "Reporte.pdf",               # nombre final del archivo
output_dir = here("2. Excel", "00. Reportes")  # carpeta de destino
)
library(rmarkdown)
library(here)
# Renderizar el PDF y guardarlo en la carpeta "2. Excel/00. Reportes"
render(
input = here("3. Reporte", "Reporte.Rmd"),  # ruta a tu .Rmd
output_format = "pdf_document",
output_file = "Reporte.pdf",               # nombre final del archivo
output_dir = here("2. Excel", "00. Reportes")  # carpeta de destino
)
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
source(here("2. Excel", "1. eso.R"))
library(here)
library(officer)
library(rmarkdown)
library(here)
# — Parámetros —
cliente <- "Nombre del Cliente S.A."
fecha   <- format(Sys.Date(), "%d/%m/%Y")
# — Rutas —
input_docx <- here("2. Excel","Hola Mundo.docx")
docx_out   <- here("2. Excel","informe_modificado.docx")
pdf_out    <- here("2. Excel","informe_modificado.pdf")
if (!file.exists(input_docx)) stop("No encuentro ", input_docx)
# 1) Leer plantilla y reemplazar
doc <- read_docx(input_docx) %>%
body_replace_all_text(old_value      = "NC12",
new_value      = cliente,
only_at_cursor = FALSE) %>%
body_replace_all_text(old_value      = "Date",
new_value      = fecha,
only_at_cursor = FALSE)
install.packages("officer")
install.packages("quantmod")
library(quantmod)
library(rmarkdown)
library(here)
library(officer)
library(rmarkdown)
library(here)
library(quantmod)
# — Parámetros —
cliente <- "Nombre del Cliente S.A."
fecha   <- format(Sys.Date(), "%d/%m/%Y")
# — Rutas —
input_docx <- here("2. Excel","Hola Mundo.docx")
docx_out   <- here("2. Excel","informe_modificado.docx")
pdf_out    <- here("2. Excel","informe_modificado.pdf")
if (!file.exists(input_docx)) stop("No encuentro ", input_docx)
# 1) Leer plantilla y reemplazar
doc <- read_docx(input_docx) %>%
body_replace_all_text(old_value      = "NC12",
new_value      = cliente,
only_at_cursor = FALSE) %>%
body_replace_all_text(old_value      = "Date",
new_value      = fecha,
only_at_cursor = FALSE)
library(dplyr)
# — Parámetros —
cliente <- "Nombre del Cliente S.A."
fecha   <- format(Sys.Date(), "%d/%m/%Y")
# — Rutas —
input_docx <- here("2. Excel","Hola Mundo.docx")
docx_out   <- here("2. Excel","informe_modificado.docx")
pdf_out    <- here("2. Excel","informe_modificado.pdf")
if (!file.exists(input_docx)) stop("No encuentro ", input_docx)
# 1) Leer plantilla y reemplazar
doc <- read_docx(input_docx) %>%
body_replace_all_text(old_value      = "NC12",
new_value      = cliente,
only_at_cursor = FALSE) %>%
body_replace_all_text(old_value      = "Date",
new_value      = fecha,
only_at_cursor = FALSE)
# 2) Guardar el .docx modificado
print(doc, target = docx_out)
# 3) Convertir sólo ese .docx a PDF
rmarkdown::pandoc_convert(
input   = docx_out,      # ← aquí tu .docx recién creado
to      = "pdf",
output  = pdf_out,
options = c("--pdf-engine=xelatex")
)
# instalar el paquete RDCOMClient si no lo tienes
if (!requireNamespace("RDCOMClient", quietly=TRUE)) {
install.packages("RDCOMClient",
repos = "http://www.omegahat.net/R",
type  = "binary")
}
library(RDCOMClient)
library(RDCOMClient)
install.packages("RDCOMClient")
install.packages("RDCOMClient",
repos = "http://www.omegahat.net/R",
type  = "binary")
# Si soffice NO está en tu PATH, reemplaza "soffice" por la ruta completa:
soffice_cmd <- "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\LibreOffice"
# Si soffice NO está en tu PATH, reemplaza "soffice" por la ruta completa:
soffice_cmd <- "C:/ProgramData/Microsoft/Windows/Start Menu/Programs/LibreOffice"
res <- system2(soffice_cmd, args = c(
"--headless",
"--convert-to", "pdf",
shQuote(input_doc),
"--outdir",    shQuote(out_dir)
), stdout = TRUE, stderr = TRUE)
# — Rutas —
input_doc <- here("2. Excel","Hola Mundo.docx")
library(rmarkdown)
library(here)
library(officer)
library(rmarkdown)
library(here)
library(quantmod)
library(dplyr)
# — Parámetros —
cliente <- "Nombre del Cliente S.A."
fecha   <- format(Sys.Date(), "%d/%m/%Y")
# — Rutas —
input_doc <- here("2. Excel","Hola Mundo.docx")
docx_out   <- here("2. Excel","informe_modificado.docx")
pdf_out    <- here("2. Excel","informe_modificado.pdf")
if (!file.exists(input_docx)) stop("No encuentro ", input_docx)
# — Rutas —
input_docx <- here("2. Excel","Hola Mundo.docx")
docx_out   <- here("2. Excel","informe_modificado.docx")
pdf_out    <- here("2. Excel","informe_modificado.pdf")
if (!file.exists(input_docx)) stop("No encuentro ", input_docx)
# 1) Leer plantilla y reemplazar
doc <- read_docx(input_docx) %>%
body_replace_all_text(old_value      = "NC12",
new_value      = cliente,
only_at_cursor = FALSE) %>%
body_replace_all_text(old_value      = "Date",
new_value      = fecha,
only_at_cursor = FALSE)
# 2) Guardar el .docx modificado
print(doc, target = docx_out)
# 3) Convertir sólo ese .docx a PDF
rmarkdown::pandoc_convert(
input   = docx_out,      # ← aquí tu .docx recién creado
to      = "pdf",
output  = pdf_out,
options = c("--pdf-engine=xelatex")
)
message("✅ PDF generado en: ", pdf_out)
# Si soffice NO está en tu PATH, reemplaza "soffice" por la ruta completa:
soffice_cmd <- "C:/ProgramData/Microsoft/Windows/Start Menu/Programs/LibreOffice"
res <- system2(soffice_cmd, args = c(
"--headless",
"--convert-to", "pdf",
shQuote(input_docx),
"--outdir",    shQuote(out_dir)
), stdout = TRUE, stderr = TRUE)
# dirname() extrae solo la parte de la ruta que corresponde al directorio
out_dir <- dirname(pdf_out)
res <- system2(soffice_cmd, args = c(
"--headless",
"--convert-to", "pdf",
shQuote(input_docx),
"--outdir",    shQuote(out_dir)
), stdout = TRUE, stderr = TRUE)
#=============================================
# Ruta al ejecutable real de LibreOffice
soffice_cmd <- "C:/Program Files/LibreOffice/program/soffice.exe"
if (!file.exists(soffice_cmd)) {
stop("No encontré soffice.exe en:\n", soffice_cmd)
}
# Llamada headless para convertir DOCX → PDF
res <- system2(soffice_cmd, args = c(
"--headless",
"--convert-to", "pdf",
shQuote(input_doc),
"--outdir",    shQuote(out_dir)
), stdout = TRUE, stderr = TRUE)
# LibreOffice deja el PDF en out_dir con mismo nombre base
auto_pdf <- file.path(out_dir,
paste0(tools::file_path_sans_ext(basename(input_doc)),
".pdf"))
if (!file.exists(auto_pdf)) {
stop("LibreOffice no generó el PDF. Salida:\n", paste(res, collapse = "\n"))
}
# (Opcional) Renómbralo si quieres un nombre distinto
file.rename(auto_pdf, pdf_out)
message("✅ PDF generado en: ", pdf_out)
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
```{r setup, include=FALSE}
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
# Ejecutar el script que genera tus variables/tablas
source(here("Flood Report","2. De Excel a RStudio","2. Exportar Tablas.R"))
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
---
title: ""
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
source(here("2. Excel", "2. eso e.R"))
# Cargar librerías necesarias
library(readxl)    # si usas read_excel
library(dplyr)     # si haces transformaciones
library(knitr)     # para usar kable
library(here)      # puede fallar el source en los .Rmd <- here()
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
# Ejecutar el script que genera tus variables/tablas
source(here("2. Excel", "1. eso.R"))
source(here("2. Excel", "2. eso e.R"))
unlink("3. Reporte/Reporte_cache", recursive = TRUE)
